{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2d7e8199-f0e1-4a0e-8f76-1916f0b1866a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# 1.Carga los datos y crea un DataFrame con cada uno de ellos.\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "46d2dde9-c925-4051-949d-fdd5f2131fec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>case_number</th>\n",
       "      <th>date</th>\n",
       "      <th>location</th>\n",
       "      <th>subject_statuses</th>\n",
       "      <th>subject_weapon</th>\n",
       "      <th>subjects</th>\n",
       "      <th>subject_count</th>\n",
       "      <th>officers</th>\n",
       "      <th>officer_count</th>\n",
       "      <th>grand_jury_disposition</th>\n",
       "      <th>attorney_general_forms_url</th>\n",
       "      <th>summary_url</th>\n",
       "      <th>summary_text</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44523A</td>\n",
       "      <td>2013-02-23</td>\n",
       "      <td>3000 Chihuahua Street</td>\n",
       "      <td>Injured</td>\n",
       "      <td>Handgun</td>\n",
       "      <td>Curry, James L/M</td>\n",
       "      <td>1</td>\n",
       "      <td>Patino, Michael L/M; Fillingim, Brian W/M</td>\n",
       "      <td>2</td>\n",
       "      <td>No Bill</td>\n",
       "      <td>None</td>\n",
       "      <td>http://dallaspolice.net/reports/OIS/narrative/...</td>\n",
       "      <td>On Saturday, February 23, 2013, at approximate...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>121982X</td>\n",
       "      <td>2010-05-03</td>\n",
       "      <td>1300 N. Munger Boulevard</td>\n",
       "      <td>Injured</td>\n",
       "      <td>Handgun</td>\n",
       "      <td>Chavez, Gabriel L/M</td>\n",
       "      <td>1</td>\n",
       "      <td>Padilla, Gilbert L/M</td>\n",
       "      <td>1</td>\n",
       "      <td>No Bill</td>\n",
       "      <td>None</td>\n",
       "      <td>http://dallaspolice.net/reports/OIS/narrative/...</td>\n",
       "      <td>On Monday, May 3, 2010, at approximately 8:06 ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>605484T</td>\n",
       "      <td>2007-08-12</td>\n",
       "      <td>200 S. Stemmons Freeway</td>\n",
       "      <td>Other</td>\n",
       "      <td>Shotgun</td>\n",
       "      <td>Salinas, Nick L/M</td>\n",
       "      <td>1</td>\n",
       "      <td>Poston, Jerry W/M</td>\n",
       "      <td>1</td>\n",
       "      <td>See Summary</td>\n",
       "      <td>None</td>\n",
       "      <td>http://dallaspolice.net/reports/OIS/narrative/...</td>\n",
       "      <td>On Sunday, August 12, 2007, at approximately 2...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>384832T</td>\n",
       "      <td>2007-05-26</td>\n",
       "      <td>7900 S. Loop 12</td>\n",
       "      <td>Shoot and Miss</td>\n",
       "      <td>Unarmed</td>\n",
       "      <td>Smith, James B/M; Dews, Antonio B/M; Spearman,...</td>\n",
       "      <td>3</td>\n",
       "      <td>Mondy, Michael B/M</td>\n",
       "      <td>1</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>http://dallaspolice.net/reports/OIS/narrative/...</td>\n",
       "      <td>On Saturday, May 26, 2007, at approximately 1:...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>244659R</td>\n",
       "      <td>2006-04-03</td>\n",
       "      <td>6512 South Loop 12</td>\n",
       "      <td>Injured</td>\n",
       "      <td>Hands</td>\n",
       "      <td>Watkins, Caleb B/M</td>\n",
       "      <td>1</td>\n",
       "      <td>Armstrong, Michael W/M</td>\n",
       "      <td>1</td>\n",
       "      <td>No Bill</td>\n",
       "      <td>None</td>\n",
       "      <td>http://dallaspolice.net/reports/OIS/narrative/...</td>\n",
       "      <td>On Monday, April 3, 2006, at approximately 11:...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  case_number        date                  location subject_statuses  \\\n",
       "0      44523A  2013-02-23     3000 Chihuahua Street          Injured   \n",
       "1     121982X  2010-05-03  1300 N. Munger Boulevard          Injured   \n",
       "2     605484T  2007-08-12   200 S. Stemmons Freeway            Other   \n",
       "3     384832T  2007-05-26           7900 S. Loop 12   Shoot and Miss   \n",
       "4     244659R  2006-04-03        6512 South Loop 12          Injured   \n",
       "\n",
       "  subject_weapon                                           subjects  \\\n",
       "0        Handgun                                   Curry, James L/M   \n",
       "1        Handgun                                Chavez, Gabriel L/M   \n",
       "2        Shotgun                                  Salinas, Nick L/M   \n",
       "3        Unarmed  Smith, James B/M; Dews, Antonio B/M; Spearman,...   \n",
       "4          Hands                                 Watkins, Caleb B/M   \n",
       "\n",
       "   subject_count                                   officers  officer_count  \\\n",
       "0              1  Patino, Michael L/M; Fillingim, Brian W/M              2   \n",
       "1              1                       Padilla, Gilbert L/M              1   \n",
       "2              1                          Poston, Jerry W/M              1   \n",
       "3              3                         Mondy, Michael B/M              1   \n",
       "4              1                     Armstrong, Michael W/M              1   \n",
       "\n",
       "  grand_jury_disposition attorney_general_forms_url  \\\n",
       "0                No Bill                       None   \n",
       "1                No Bill                       None   \n",
       "2            See Summary                       None   \n",
       "3                   None                       None   \n",
       "4                No Bill                       None   \n",
       "\n",
       "                                         summary_url  \\\n",
       "0  http://dallaspolice.net/reports/OIS/narrative/...   \n",
       "1  http://dallaspolice.net/reports/OIS/narrative/...   \n",
       "2  http://dallaspolice.net/reports/OIS/narrative/...   \n",
       "3  http://dallaspolice.net/reports/OIS/narrative/...   \n",
       "4  http://dallaspolice.net/reports/OIS/narrative/...   \n",
       "\n",
       "                                        summary_text  latitude  longitude  \n",
       "0  On Saturday, February 23, 2013, at approximate...       NaN        NaN  \n",
       "1  On Monday, May 3, 2010, at approximately 8:06 ...       NaN        NaN  \n",
       "2  On Sunday, August 12, 2007, at approximately 2...       NaN        NaN  \n",
       "3  On Saturday, May 26, 2007, at approximately 1:...       NaN        NaN  \n",
       "4  On Monday, April 3, 2006, at approximately 11:...       NaN        NaN  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#incidents\n",
    "df1 =  pd.read_pickle(\"incidents.pkl\")\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e4713d48-eccb-4bfd-a544-a6ef10fcdf4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>case_number</th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>last_name</th>\n",
       "      <th>first_name</th>\n",
       "      <th>full_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44523A</td>\n",
       "      <td>L</td>\n",
       "      <td>M</td>\n",
       "      <td>Patino</td>\n",
       "      <td>Michael</td>\n",
       "      <td>Patino, Michael</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44523A</td>\n",
       "      <td>W</td>\n",
       "      <td>M</td>\n",
       "      <td>Fillingim</td>\n",
       "      <td>Brian</td>\n",
       "      <td>Fillingim, Brian</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>121982X</td>\n",
       "      <td>L</td>\n",
       "      <td>M</td>\n",
       "      <td>Padilla</td>\n",
       "      <td>Gilbert</td>\n",
       "      <td>Padilla, Gilbert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>605484T</td>\n",
       "      <td>W</td>\n",
       "      <td>M</td>\n",
       "      <td>Poston</td>\n",
       "      <td>Jerry</td>\n",
       "      <td>Poston, Jerry</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>384832T</td>\n",
       "      <td>B</td>\n",
       "      <td>M</td>\n",
       "      <td>Mondy</td>\n",
       "      <td>Michael</td>\n",
       "      <td>Mondy, Michael</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  case_number race gender  last_name first_name         full_name\n",
       "0      44523A    L      M     Patino    Michael   Patino, Michael\n",
       "1      44523A    W      M  Fillingim      Brian  Fillingim, Brian\n",
       "2     121982X    L      M    Padilla    Gilbert  Padilla, Gilbert\n",
       "3     605484T    W      M     Poston      Jerry     Poston, Jerry\n",
       "4     384832T    B      M      Mondy    Michael    Mondy, Michael"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#officers\n",
    "df2 =  pd.read_pickle(\"officers.pkl\")\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "91812fbb-f5e5-4f84-b414-151c6850884b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>case_number</th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>last_name</th>\n",
       "      <th>first_name</th>\n",
       "      <th>full_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44523A</td>\n",
       "      <td>L</td>\n",
       "      <td>M</td>\n",
       "      <td>Curry</td>\n",
       "      <td>James</td>\n",
       "      <td>Curry, James</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>121982X</td>\n",
       "      <td>L</td>\n",
       "      <td>M</td>\n",
       "      <td>Chavez</td>\n",
       "      <td>Gabriel</td>\n",
       "      <td>Chavez, Gabriel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>605484T</td>\n",
       "      <td>L</td>\n",
       "      <td>M</td>\n",
       "      <td>Salinas</td>\n",
       "      <td>Nick</td>\n",
       "      <td>Salinas, Nick</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>384832T</td>\n",
       "      <td>B</td>\n",
       "      <td>M</td>\n",
       "      <td>Smith</td>\n",
       "      <td>James</td>\n",
       "      <td>Smith, James</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>384832T</td>\n",
       "      <td>B</td>\n",
       "      <td>M</td>\n",
       "      <td>Dews</td>\n",
       "      <td>Antonio</td>\n",
       "      <td>Dews, Antonio</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  case_number race gender last_name first_name        full_name\n",
       "0      44523A    L      M     Curry      James     Curry, James\n",
       "1     121982X    L      M    Chavez    Gabriel  Chavez, Gabriel\n",
       "2     605484T    L      M   Salinas       Nick    Salinas, Nick\n",
       "3     384832T    B      M     Smith      James     Smith, James\n",
       "4     384832T    B      M      Dews    Antonio    Dews, Antonio"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#officers\n",
    "df3 =  pd.read_pickle(\"subjects.pkl\")\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bdb78bb-499f-42e8-9bc8-75a111aa04ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2.Genera una tabla que contenga la unión de las 3 tablas. hint: utiliza sufijos para para las\n",
    "#columnas que se llaman igual usando el parámetro suffixes de pd.merge()\n",
    "\n",
    "# Unir df1 y df2 usando la columna en común, por ejemplo 'case_number'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fcc09130-6993-4556-9e40-af90b53c7533",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Unir df1 y df2 usando la columna en común, por ejemplo 'case_number'\n",
    "merge_1_2 = pd.merge(df1, df2,how ='outer', on='case_number', suffixes=('_df1', '_df2'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7855a66b-6d5b-42b2-b8ba-936565d75d76",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Luego unir el resultado con df3\n",
    "tabla_final = pd.merge(merge_1_2, df3,how ='outer', on='case_number', suffixes=('', '_df3'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "62727f07-adce-4d6d-9736-b7b841906aa3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  case_number        date                  location subject_statuses  \\\n",
      "0      44523A  2013-02-23     3000 Chihuahua Street          Injured   \n",
      "1      44523A  2013-02-23     3000 Chihuahua Street          Injured   \n",
      "2     121982X  2010-05-03  1300 N. Munger Boulevard          Injured   \n",
      "3     605484T  2007-08-12   200 S. Stemmons Freeway            Other   \n",
      "4     384832T  2007-05-26           7900 S. Loop 12   Shoot and Miss   \n",
      "\n",
      "  subject_weapon                                           subjects  \\\n",
      "0        Handgun                                   Curry, James L/M   \n",
      "1        Handgun                                   Curry, James L/M   \n",
      "2        Handgun                                Chavez, Gabriel L/M   \n",
      "3        Shotgun                                  Salinas, Nick L/M   \n",
      "4        Unarmed  Smith, James B/M; Dews, Antonio B/M; Spearman,...   \n",
      "\n",
      "   subject_count                                   officers  officer_count  \\\n",
      "0              1  Patino, Michael L/M; Fillingim, Brian W/M              2   \n",
      "1              1  Patino, Michael L/M; Fillingim, Brian W/M              2   \n",
      "2              1                       Padilla, Gilbert L/M              1   \n",
      "3              1                          Poston, Jerry W/M              1   \n",
      "4              3                         Mondy, Michael B/M              1   \n",
      "\n",
      "  grand_jury_disposition  ... race gender  last_name  first_name  \\\n",
      "0                No Bill  ...    L      M     Patino     Michael   \n",
      "1                No Bill  ...    W      M  Fillingim       Brian   \n",
      "2                No Bill  ...    L      M    Padilla     Gilbert   \n",
      "3            See Summary  ...    W      M     Poston       Jerry   \n",
      "4                   None  ...    B      M      Mondy     Michael   \n",
      "\n",
      "          full_name race_df3 gender_df3 last_name_df3 first_name_df3  \\\n",
      "0   Patino, Michael        L          M         Curry          James   \n",
      "1  Fillingim, Brian        L          M         Curry          James   \n",
      "2  Padilla, Gilbert        L          M        Chavez        Gabriel   \n",
      "3     Poston, Jerry        L          M       Salinas           Nick   \n",
      "4    Mondy, Michael        B          M         Smith          James   \n",
      "\n",
      "     full_name_df3  \n",
      "0     Curry, James  \n",
      "1     Curry, James  \n",
      "2  Chavez, Gabriel  \n",
      "3    Salinas, Nick  \n",
      "4     Smith, James  \n",
      "\n",
      "[5 rows x 25 columns]\n",
      "Columnas: Index(['case_number', 'date', 'location', 'subject_statuses', 'subject_weapon',\n",
      "       'subjects', 'subject_count', 'officers', 'officer_count',\n",
      "       'grand_jury_disposition', 'attorney_general_forms_url', 'summary_url',\n",
      "       'summary_text', 'latitude', 'longitude', 'race', 'gender', 'last_name',\n",
      "       'first_name', 'full_name', 'race_df3', 'gender_df3', 'last_name_df3',\n",
      "       'first_name_df3', 'full_name_df3'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Mostrar la tabla final\n",
    "print(tabla_final.head())\n",
    "\n",
    "print(\"Columnas:\", tabla_final.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e7d3a258-d390-4a7c-9d38-59c4cc34886b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Las filas duplicadas son: Empty DataFrame\n",
      "Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers, officer_count, grand_jury_disposition, attorney_general_forms_url, summary_url, summary_text, latitude, longitude, race, gender, last_name, first_name, full_name, race_df3, gender_df3, last_name_df3, first_name_df3, full_name_df3]\n",
      "Index: []\n",
      "\n",
      "[0 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "#3.c. Verifica si hay filas duplicadas; si es así, elimínalas.\n",
    "filas_duplicadas = tabla_final[tabla_final.duplicated()]\n",
    "print(\"Las filas duplicadas son:\", filas_duplicadas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1fb54c5b-0f69-4b31-b6c9-bad13b02fa0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_nuevo_sin_duplicados= tabla_final.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "45b0608e-59e1-4b30-a855-09234deb9d54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Las filas duplicadas son: Empty DataFrame\n",
      "Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers, officer_count, grand_jury_disposition, attorney_general_forms_url, summary_url, summary_text, latitude, longitude, race, gender, last_name, first_name, full_name, race_df3, gender_df3, last_name_df3, first_name_df3, full_name_df3]\n",
      "Index: []\n",
      "\n",
      "[0 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "filas_duplicadas = df_nuevo_sin_duplicados[df_nuevo_sin_duplicados.duplicated()]\n",
    "print(\"Las filas duplicadas son:\", filas_duplicadas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "89cff10e-f47a-47d4-a1f2-80d9487149fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cantidad género F: 20\n"
     ]
    }
   ],
   "source": [
    "#4. ¿Cuántos sujetos de género F hay en el DataFrame resultante? hint: usa el método .value_counts() sobre la columna.\n",
    "\n",
    "Q_Femenino = df_nuevo_sin_duplicados['gender'].value_counts().get('F', 0)\n",
    "print(f\"Cantidad género F: {Q_Femenino}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "c729f62c-7c2d-4b83-a04b-b3eba9dda48b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#4.¿Encuántos números de caso hay por lo menos una sospechosa que sea mujer? hint: utiliza el método unique() para obtener los valores únicos de una columna específica de  un DataFrame luego de filtrar.\n",
    "\n",
    "sospecha_mujer = df_nuevo_sin_duplicados[df_nuevo_sin_duplicados['gender'] == 'F']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8aa8f50b-787c-4cb6-9050-66ac3ad906e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# valores únicos donde aparece al menos una mujer\n",
    "casos_mujeres = sospecha_mujer['case_number'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "77fcc620-e4cb-4b06-89bb-5d221b5c0ba7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "la cantidad de 17 casos de sospecha de mujer.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Contar cuántos casos únicos hay\n",
    "cantidad_casos = len(casos_mujeres)\n",
    "print(f\"la cantidad de {cantidad_casos} casos de sospecha de mujer.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "22e38f5f-cbf0-4ed1-9697-738f8efac69c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "subjects  Abdel, Aziz W/M  Abdulkarim, Ismail W/M  Acosta-Serrano, Jose L/M  \\\n",
      "gender                                                                        \n",
      "F                       0                       0                         0   \n",
      "M                       1                       2                         1   \n",
      "\n",
      "subjects  Adams, Robert B/M  Alardin, Mark L/M  Alexander, Gaylon B/M  \\\n",
      "gender                                                                  \n",
      "F                         0                  0                      0   \n",
      "M                         1                  1                      2   \n",
      "\n",
      "subjects  Alford, Joseph B/M  Allen, Joel W/M  Allen, Tyrone B/M  \\\n",
      "gender                                                             \n",
      "F                          0                0                  0   \n",
      "M                          1                1                  2   \n",
      "\n",
      "subjects  Almanza, Jose L/M  ...  Williams, Joseph B/M  Williams, Michael B/M  \\\n",
      "gender                       ...                                                \n",
      "F                         0  ...                     0                      0   \n",
      "M                         2  ...                     2                      1   \n",
      "\n",
      "subjects  Williams, Robert B/M  Wilson, Alerick B/M  Wilson, Fred B/M  \\\n",
      "gender                                                                  \n",
      "F                            0                    1                 0   \n",
      "M                            2                    1                 1   \n",
      "\n",
      "subjects  Wilson, Terry B/M  Woodson, Anthony B/M  Wrigley, Larry B/M  \\\n",
      "gender                                                                  \n",
      "F                         0                     0                   0   \n",
      "M                         1                     1                   1   \n",
      "\n",
      "subjects  Wyatt, Michael B/M  Zoller, Jonathan W/M  \n",
      "gender                                              \n",
      "F                          0                     0  \n",
      "M                          1                     1  \n",
      "\n",
      "[2 rows x 205 columns]\n"
     ]
    }
   ],
   "source": [
    "#5.Genera una tabla pivote que muestre en las filas el género del oficial y en las columnas el  género del subject. ¿Cómo interpretas los valores que muestra esta vista?\n",
    "\n",
    "tabla_pivote = pd.pivot_table(\n",
    "    df_nuevo_sin_duplicados, \n",
    "    index='gender', \n",
    "    columns='subjects', \n",
    "    aggfunc='size', \n",
    "    fill_value=0\n",
    ")\n",
    "\n",
    "print(tabla_pivote)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "42e00dc5-e6d5-4992-a0a9-9417b97296ca",
   "metadata": {},
   "outputs": [],
   "source": [
    " #Para continuar con el desarrollo de este desafío, necesitarás el archivos  Cleaned_DS_Jobs.csv\n",
    "import pandas as pd \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a1f2702b-dd96-45fb-9742-f3bccf954ec6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Job Title</th>\n",
       "      <th>Salary Estimate</th>\n",
       "      <th>Job Description</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Company Name</th>\n",
       "      <th>Location</th>\n",
       "      <th>Headquarters</th>\n",
       "      <th>Size</th>\n",
       "      <th>Type of ownership</th>\n",
       "      <th>Industry</th>\n",
       "      <th>...</th>\n",
       "      <th>company_age</th>\n",
       "      <th>python</th>\n",
       "      <th>excel</th>\n",
       "      <th>hadoop</th>\n",
       "      <th>spark</th>\n",
       "      <th>aws</th>\n",
       "      <th>tableau</th>\n",
       "      <th>big_data</th>\n",
       "      <th>job_simp</th>\n",
       "      <th>seniority</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sr Data Scientist</td>\n",
       "      <td>137-171</td>\n",
       "      <td>Description\\n\\nThe Senior Data Scientist is re...</td>\n",
       "      <td>3.1</td>\n",
       "      <td>Healthfirst</td>\n",
       "      <td>New York, NY</td>\n",
       "      <td>New York, NY</td>\n",
       "      <td>1001 to 5000 employees</td>\n",
       "      <td>Nonprofit Organization</td>\n",
       "      <td>Insurance Carriers</td>\n",
       "      <td>...</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>data scientist</td>\n",
       "      <td>senior</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>137-171</td>\n",
       "      <td>Secure our Nation, Ignite your Future\\n\\nJoin ...</td>\n",
       "      <td>4.2</td>\n",
       "      <td>ManTech</td>\n",
       "      <td>Chantilly, VA</td>\n",
       "      <td>Herndon, VA</td>\n",
       "      <td>5001 to 10000 employees</td>\n",
       "      <td>Company - Public</td>\n",
       "      <td>Research &amp; Development</td>\n",
       "      <td>...</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>data scientist</td>\n",
       "      <td>na</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>137-171</td>\n",
       "      <td>Overview\\n\\n\\nAnalysis Group is one of the lar...</td>\n",
       "      <td>3.8</td>\n",
       "      <td>Analysis Group</td>\n",
       "      <td>Boston, MA</td>\n",
       "      <td>Boston, MA</td>\n",
       "      <td>1001 to 5000 employees</td>\n",
       "      <td>Private Practice / Firm</td>\n",
       "      <td>Consulting</td>\n",
       "      <td>...</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>data scientist</td>\n",
       "      <td>na</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>137-171</td>\n",
       "      <td>JOB DESCRIPTION:\\n\\nDo you have a passion for ...</td>\n",
       "      <td>3.5</td>\n",
       "      <td>INFICON</td>\n",
       "      <td>Newton, MA</td>\n",
       "      <td>Bad Ragaz, Switzerland</td>\n",
       "      <td>501 to 1000 employees</td>\n",
       "      <td>Company - Public</td>\n",
       "      <td>Electrical &amp; Electronic Manufacturing</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>data scientist</td>\n",
       "      <td>na</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>137-171</td>\n",
       "      <td>Data Scientist\\nAffinity Solutions / Marketing...</td>\n",
       "      <td>2.9</td>\n",
       "      <td>Affinity Solutions</td>\n",
       "      <td>New York, NY</td>\n",
       "      <td>New York, NY</td>\n",
       "      <td>51 to 200 employees</td>\n",
       "      <td>Company - Private</td>\n",
       "      <td>Advertising &amp; Marketing</td>\n",
       "      <td>...</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>data scientist</td>\n",
       "      <td>na</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Job Title Salary Estimate  \\\n",
       "0  Sr Data Scientist        137-171    \n",
       "1     Data Scientist        137-171    \n",
       "2     Data Scientist        137-171    \n",
       "3     Data Scientist        137-171    \n",
       "4     Data Scientist        137-171    \n",
       "\n",
       "                                     Job Description  Rating  \\\n",
       "0  Description\\n\\nThe Senior Data Scientist is re...     3.1   \n",
       "1  Secure our Nation, Ignite your Future\\n\\nJoin ...     4.2   \n",
       "2  Overview\\n\\n\\nAnalysis Group is one of the lar...     3.8   \n",
       "3  JOB DESCRIPTION:\\n\\nDo you have a passion for ...     3.5   \n",
       "4  Data Scientist\\nAffinity Solutions / Marketing...     2.9   \n",
       "\n",
       "         Company Name       Location            Headquarters  \\\n",
       "0         Healthfirst   New York, NY            New York, NY   \n",
       "1             ManTech  Chantilly, VA             Herndon, VA   \n",
       "2      Analysis Group     Boston, MA              Boston, MA   \n",
       "3             INFICON     Newton, MA  Bad Ragaz, Switzerland   \n",
       "4  Affinity Solutions   New York, NY            New York, NY   \n",
       "\n",
       "                      Size        Type of ownership  \\\n",
       "0   1001 to 5000 employees   Nonprofit Organization   \n",
       "1  5001 to 10000 employees         Company - Public   \n",
       "2   1001 to 5000 employees  Private Practice / Firm   \n",
       "3    501 to 1000 employees         Company - Public   \n",
       "4      51 to 200 employees        Company - Private   \n",
       "\n",
       "                                Industry  ... company_age python  excel  \\\n",
       "0                     Insurance Carriers  ...          27      0      0   \n",
       "1                 Research & Development  ...          52      0      0   \n",
       "2                             Consulting  ...          39      1      1   \n",
       "3  Electrical & Electronic Manufacturing  ...          20      1      1   \n",
       "4                Advertising & Marketing  ...          22      1      1   \n",
       "\n",
       "   hadoop  spark aws  tableau  big_data        job_simp  seniority  \n",
       "0       0      0   1        0         0  data scientist     senior  \n",
       "1       1      0   0        0         1  data scientist         na  \n",
       "2       0      0   1        0         0  data scientist         na  \n",
       "3       0      0   1        0         0  data scientist         na  \n",
       "4       0      0   0        0         0  data scientist         na  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#incidents\n",
    "df_cleaned =  pd.read_csv(\"Cleaned_DS_Jobs.csv\")\n",
    "df_cleaned.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7a7a1f55-90e9-464c-83a7-5537a8d5d8fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Job Title              0\n",
      "Salary Estimate        0\n",
      "Job Description        0\n",
      "Rating                 0\n",
      "Company Name           0\n",
      "Location               0\n",
      "Headquarters          31\n",
      "Size                  27\n",
      "Type of ownership     27\n",
      "Industry              71\n",
      "Sector                71\n",
      "Revenue               27\n",
      "min_salary             0\n",
      "max_salary             0\n",
      "avg_salary             0\n",
      "job_state              0\n",
      "same_state             0\n",
      "company_age          118\n",
      "python                 0\n",
      "excel                  0\n",
      "hadoop                 0\n",
      "spark                  0\n",
      "aws                    0\n",
      "tableau                0\n",
      "big_data               0\n",
      "job_simp              68\n",
      "seniority            567\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Utiliza la siguiente lista de valores que serán considerados como nulos: [\"na\", \"NA\",-1, \"0\", \"-1\", \"null\", \"n/a\", \"N/A\", \"NULL\"]  (hint: utiliza el método replace para reemplazar los valores indicados por np.nan)\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "valor_nulo = [\"na\", \"NA\", -1, \"0\", \"-1\", \"null\", \"n/a\", \"N/A\", \"NULL\"]\n",
    "df_cleaned = df_cleaned.replace(valor_nulo, np.nan)\n",
    "print(df_cleaned.isna().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7338c36c-7731-441f-adaf-636041cb574e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Job Title            0\n",
      "Salary Estimate      0\n",
      "Job Description      0\n",
      "Rating               0\n",
      "Company Name         0\n",
      "Location             0\n",
      "Headquarters         0\n",
      "Size                 0\n",
      "Type of ownership    0\n",
      "Industry             0\n",
      "Sector               0\n",
      "Revenue              0\n",
      "min_salary           0\n",
      "max_salary           0\n",
      "avg_salary           0\n",
      "job_state            0\n",
      "same_state           0\n",
      "company_age          0\n",
      "python               0\n",
      "excel                0\n",
      "hadoop               0\n",
      "spark                0\n",
      "aws                  0\n",
      "tableau              0\n",
      "big_data             0\n",
      "job_simp             0\n",
      "seniority            0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Elimina todas las filas con datos faltantes. (hint: utiliza el método .dropna())\n",
    "df_cleaned = df_cleaned.dropna()\n",
    "print(df_cleaned.isna().sum()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "cf4cbab1-40aa-4505-962f-f32791639cd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Apartir de la columna “Salary Estimate”, genera dos columnas: Salario Estimado Mínimo  y Máximo. (hint: Utiliza el método apply sobre la columna.)\n",
    "\n",
    "#Realiza la recodificación de la columna Size con los valores de la siguiente tabla: (hint: utilice reemplazo con diccionario usando el método replace sobre la columna.)\n",
    "diccionario_size = {\n",
    "    '10000+ employees': 'MegaEmpresas',\n",
    "    '5001 to 10000 employees': 'Grandes Empresas',\n",
    "    '1001 to 5000 employees': 'Medianas Empresas',\n",
    "    '501 to 1000 employees': 'Pequeñas Grandes Empresas',\n",
    "    '201 to 500 employees': 'Pequeñas Empresas',\n",
    "    '51 to 200 employees': 'Pequeñas Empresas',\n",
    "    '1 to 50 employees': 'Microempresas',\n",
    "    'Unknown': 'Empresas sin Información',\n",
    "    '-1': 'Empresas sin Información',  \n",
    "    '0': 'Empresas sin Información',  \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "cfc16c24-1756-40e3-9784-a0fd42e3e90d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size\n",
      "Pequeñas Empresas            23\n",
      "Pequeñas Grandes Empresas    17\n",
      "Grandes Empresas             16\n",
      "Medianas Empresas            13\n",
      "MegaEmpresas                  9\n",
      "Empresas sin Información      2\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df_cleaned['Size'] = df_cleaned['Size'].replace(diccionario_size)\n",
    "print(df_cleaned['Size'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2e798ad4-cee0-47eb-accd-ee97a6c5cf3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           max_salary  min_salary\n",
      "Size                                             \n",
      "Empresas sin Información   110.500000   73.000000\n",
      "Grandes Empresas           138.875000   92.125000\n",
      "Medianas Empresas          137.461538   93.923077\n",
      "MegaEmpresas               151.111111   97.888889\n",
      "Pequeñas Empresas          139.782609   96.347826\n",
      "Pequeñas Grandes Empresas  146.235294  100.176471\n"
     ]
    }
   ],
   "source": [
    "#Finalmente, genera una tabla pivote que muestre la media del salario estimado mínimo y  la media del salario estimado máximo por tamaño de empresa. (hint: utiliza  pd.pivot_table para generar la vista adecuada con las columnas generadas.)\n",
    "\n",
    "tabla_S = pd.pivot_table(\n",
    "    df_cleaned,\n",
    "    index='Size',\n",
    "    values=['min_salary', 'max_salary'],\n",
    "    aggfunc='mean'\n",
    ")\n",
    "\n",
    "print(tabla_S)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d3d0717-09bc-4122-8251-b209802aa9a0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-panel-2023.05-py310",
   "language": "python",
   "name": "conda-env-anaconda-panel-2023.05-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
